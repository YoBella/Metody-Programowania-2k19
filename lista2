#lang racket

(define (compose f g)
  (lambda (x) (f (g x)))
  )

(define (inc x)
  (+ x 1))
(define (square x)
  (* x x))
;;((lambda (x) (+ x 1)) 1)
(define (identity x)
  x)

(define (repeated p n)
  (if (= n 0)
      identity
      (compose p (repeated p (- n 1)))
      ))

(define (sum val next start end)
  (if (> start end)
      0
      (+ (val start)
         (sum val next (next start) end))))

(define (product val next start end)
  (if (> start end)
      1
      (* (val start) (product val next (next start) end))
      ))
;(define (pi_val n)
 ; (if (odd n)
;      (/ (+ n 1) n)
;      (/ n (+ n 1)))
 ; )
;(define (odd a)

(define (accumulate comb null-val term start next end)
  (if (> start end)
      null-val
      (comb (term start)
     (accumulate comb null-val term (next start) next end)))
  )

(define (accumulate-iter comb term start next end wynik)
  (if (> start end)
      wynik
     (accumulate comb term (next start) next end
                 (comb wynik (term start)))
     )
 ; (accumulate-iter comb term start next end null_value)
   )

(define (cont-frac num den k)
  (define (pom a)
    (if (<= a k)
        (/(num a) (+ (den a) (pom (+ a 1))))
        0 )
    )
  (pom 1))
(define (contfrac-iter num den k)
  (define (pom a wynik)
    (if (> a 0)
        (pom (- a 1) (/ (num a) (+ (den a) wynik)))
        wynik)
    )
  (pom k 0))

(define (iden6 x) 6)
(define (pisquare x)
     (- (* 2 x) 1))